{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, createContext, useCallback, useContext, Fragment } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\n\nvar _reducers;\n\nvar DisclosureStates;\n\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 1] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 2] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 3] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 4] = \"UnlinkPanel\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.ToggleDisclosure] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers[ActionTypes.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers[ActionTypes.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar DisclosureContext = /*#__PURE__*/createContext(null);\nDisclosureContext.displayName = 'DisclosureContext';\n\nfunction useDisclosureContext(component) {\n  var context = useContext(DisclosureContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_DISCLOSURE_TAG = Fragment;\n\nfunction Disclosure(props) {\n  var _match2;\n\n  var _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open\n    };\n  }, [disclosureState]);\n  return React.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, React.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  })));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n      state = _useDisclosureContext[0],\n      dispatch = _useDisclosureContext[1];\n\n  var buttonRef = useSyncRefs(ref);\n  var handleKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n      case Keys.Enter:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes.ToggleDisclosure\n        });\n        break;\n    }\n  }, [dispatch]);\n  var handleKeyUp = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    dispatch({\n      type: ActionTypes.ToggleDisclosure\n    });\n  }, [dispatch, props.disabled]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n      state = _useDisclosureContext2[0],\n      dispatch = _useDisclosureContext2[1];\n\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  });\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\nexport { Disclosure };","map":{"version":3,"sources":["../../../src/components/disclosure/disclosure.tsx"],"names":["DisclosureStates","ActionTypes","reducers","disclosureState","match","state","linkedPanel","action","buttonId","panelId","DisclosureContext","createContext","context","useContext","err","Disclosure","Error","DEFAULT_DISCLOSURE_TAG","props","defaultOpen","passthroughProps","useId","reducerBag","useReducer","dispatch","useEffect","type","slot","useMemo","open","Open","value","State","render","defaultTag","name","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","useDisclosureContext","buttonRef","useSyncRefs","handleKeyDown","useCallback","event","Keys","ToggleDisclosure","handleKeyUp","handleClick","isDisabledReactIssue7711","propsWeControl","ref","id","onKeyDown","onKeyUp","onClick","DEFAULT_PANEL_TAG","PanelRenderFeatures","Features","Panel","panelRef","LinkPanel","usesOpenClosedState","useOpenClosed","visible","UnlinkPanel","features"],"mappings":"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","sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open }),\n    [disclosureState]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(disclosureState, {\n          [DisclosureStates.Open]: State.Open,\n          [DisclosureStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passthroughProps,\n          slot,\n          defaultTag: DEFAULT_DISCLOSURE_TAG,\n          name: 'Disclosure',\n        })}\n      </OpenClosedProvider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ToggleDisclosure })\n          break\n      }\n    },\n    [dispatch]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      dispatch({ type: ActionTypes.ToggleDisclosure })\n    },\n    [dispatch, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible,\n    name: 'Disclosure.Panel',\n  })\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n"]},"metadata":{},"sourceType":"module"}